# Copyright 2022 Google LLC
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

name: Deploy GCP services (prod)
on:
  push:
    branches:
      - main
  workflow_dispatch:
jobs:
  resize-image:
    name: 'GCP: Deploy resize-image'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Checkout main
        uses: actions/checkout@main
        with:
          ref: main
          fetch-depth: 0
      - name: Test changed files
        id: changed-files
        uses: tj-actions/changed-files@v15
        with:
          files: |
            gcp/resize-image/**
            .github/workflows/deploy-gcp-prod.yml
          since_last_remote_commit: "true"
      - name: Authenticate to Google Cloud
        if: steps.changed-files.outputs.any_changed == 'true' || github.event.action == 'workflow_dispatch'
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: ${{ secrets.GCP_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      - name: Setup Cloud SDK
        if: steps.changed-files.outputs.any_changed == 'true' || github.event.action == 'workflow_dispatch'
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
      - name: Authorize Docker push
        if: steps.changed-files.outputs.any_changed == 'true' || github.event.action == 'workflow_dispatch'
        run: gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev
      - name: Enable Docker caching
        if: steps.changed-files.outputs.any_changed == 'true' || github.event.action == 'workflow_dispatch'
        uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true
        with:
          key: fmnas-{hash}
          restore-keys: |
            fmnas-
      - name: Build container
        if: steps.changed-files.outputs.any_changed == 'true' || github.event.action == 'workflow_dispatch'
        run: docker build -t ${{ secrets.RESIZE_IMAGE_REPO }}/resize-image:prod gcp/resize-image
      - name: Push to Artifact Registry
        if: steps.changed-files.outputs.any_changed == 'true' || github.event.action == 'workflow_dispatch'
        run: docker push ${{ secrets.RESIZE_IMAGE_REPO }}/resize-image:prod
      - name: Deploy to Cloud Run
        if: steps.changed-files.outputs.any_changed == 'true' || github.event.action == 'workflow_dispatch'
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: resize-image
          image: ${{ secrets.RESIZE_IMAGE_REPO }}/resize-image:prod
          region: ${{ secrets.PROD_GCP_REGION }}
      - name: Clean up old versions
        if: steps.changed-files.outputs.any_changed == 'true' || github.event.action == 'workflow_dispatch'
        run: |
          gcloud artifacts docker images list ${{ secrets.RESIZE_IMAGE_REPO }}/resize-image --include-tags |
            awk '$3 ~ /^2/ { print $2 }' | 
            xargs -I % gcloud artifacts docker images delete ${{ secrets.RESIZE_IMAGE_REPO }}/resize-image@%
      - name: Get deployment URL
        if: steps.changed-files.outputs.any_changed == 'true' || github.event.action == 'workflow_dispatch'
        run: echo ${{ steps.deploy.outputs.url }}
  image-size:
    name: 'GCP: Deploy image-size'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Checkout main
        uses: actions/checkout@main
        with:
          ref: main
          fetch-depth: 0
      - name: Test changed files
        id: changed-files
        uses: tj-actions/changed-files@v15
        with:
          files: |
            gcp/image-size/**
            .github/workflows/deploy-gcp-prod.yml
          since_last_remote_commit: "true"
      - name: Authenticate to Google Cloud
        if: steps.changed-files.outputs.any_changed == 'true' || github.event.action == 'workflow_dispatch'
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: ${{ secrets.GCP_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      - name: Setup Cloud SDK
        if: steps.changed-files.outputs.any_changed == 'true' || github.event.action == 'workflow_dispatch'
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
      - name: Authorize Docker push
        if: steps.changed-files.outputs.any_changed == 'true' || github.event.action == 'workflow_dispatch'
        run: gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev
      - name: Enable Docker caching
        if: steps.changed-files.outputs.any_changed == 'true' || github.event.action == 'workflow_dispatch'
        uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true
        with:
          key: fmnas-{hash}
          restore-keys: |
            fmnas-
      - name: Build container
        if: steps.changed-files.outputs.any_changed == 'true' || github.event.action == 'workflow_dispatch'
        run: docker build -t ${{ secrets.IMAGE_SIZE_REPO }}/image-size:prod gcp/image-size
      - name: Push to Artifact Registry
        if: steps.changed-files.outputs.any_changed == 'true' || github.event.action == 'workflow_dispatch'
        run: docker push ${{ secrets.IMAGE_SIZE_REPO }}/image-size:prod
      - name: Deploy to Cloud Run
        if: steps.changed-files.outputs.any_changed == 'true' || github.event.action == 'workflow_dispatch'
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: image-size
          image: ${{ secrets.IMAGE_SIZE_REPO }}/image-size:prod
      - name: Clean up old versions
        if: steps.changed-files.outputs.any_changed == 'true' || github.event.action == 'workflow_dispatch'
        run: |
          gcloud artifacts docker images list ${{ secrets.IMAGE_SIZE_REPO }}/image-size --include-tags |
            awk '$3 ~ /^2/ { print $2 }' | 
            xargs -I % gcloud artifacts docker images delete ${{ secrets.IMAGE_SIZE_REPO }}/image-size@%
      - name: Get deployment URL
        if: steps.changed-files.outputs.any_changed == 'true' || github.event.action == 'workflow_dispatch'
        run: echo ${{ steps.deploy.outputs.url }}
  print-pdf:
    name: 'GCP: Deploy print-pdf'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Checkout main
        uses: actions/checkout@main
        with:
          ref: main
          fetch-depth: 0
      - name: Test changed files
        id: changed-files
        uses: tj-actions/changed-files@v15
        with:
          files: |
            gcp/print-pdf/**
            .github/workflows/deploy-gcp-prod.yml
          since_last_remote_commit: "true"
      - name: Set up Node
        if: steps.changed-files.outputs.any_changed == 'true' || github.event.action == 'workflow_dispatch'
        uses: actions/setup-node@v2
        with:
          node-version-file: 'gcp/print-pdf/.nvmrc'
          cache: 'npm'
          cache-dependency-path: gcp/print-pdf/package-lock.json
      - name: Install build dependences
        if: steps.changed-files.outputs.any_changed == 'true' || github.event.action == 'workflow_dispatch'
        working-directory: gcp/print-pdf
        run: npm install --only=dev
      - name: Compile function
        if: steps.changed-files.outputs.any_changed == 'true' || github.event.action == 'workflow_dispatch'
        working-directory: gcp/print-pdf
        run: npm run compile
      - name: Authenticate to Google Cloud
        if: steps.changed-files.outputs.any_changed == 'true' || github.event.action == 'workflow_dispatch'
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: ${{ secrets.GCP_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      - name: Deploy to Cloud Functions
        if: steps.changed-files.outputs.any_changed == 'true' || github.event.action == 'workflow_dispatch'
        id: deploy
        uses: google-github-actions/deploy-cloud-functions@v0
        with:
          name: print-pdf
          source_dir: gcp/print-pdf
          runtime: nodejs16
          entry_point: printPdf
          memory_mb: 2048
          region: ${{ secrets.GCP_REGION }}
          https_trigger_security_level: secure_always
          timeout: 10
          min_instances: 0
          max_instances: 100
          project_id: ${{ secrets.GCP_PROJECT }}
  minify-html:
    name: 'GCP: Deploy minify-html'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Checkout main
        uses: actions/checkout@main
        with:
          ref: main
          fetch-depth: 0
      - name: Test changed files
        id: changed-files
        uses: tj-actions/changed-files@v15
        with:
          files: |
            gcp/minify-html/**
            .github/workflows/deploy-gcp-prod.yml
          since_last_remote_commit: "true"
      - name: Set up Node
        if: steps.changed-files.outputs.any_changed == 'true' || github.event.action == 'workflow_dispatch'
        uses: actions/setup-node@v2
        with:
          node-version-file: 'gcp/minify-html/.nvmrc'
          cache: 'npm'
          cache-dependency-path: gcp/minify-html/package-lock.json
      - name: Install build dependences
        if: steps.changed-files.outputs.any_changed == 'true' || github.event.action == 'workflow_dispatch'
        working-directory: gcp/minify-html
        run: npm install --only=dev
      - name: Compile function
        if: steps.changed-files.outputs.any_changed == 'true' || github.event.action == 'workflow_dispatch'
        working-directory: gcp/minify-html
        run: npm run compile
      - name: Authenticate to Google Cloud
        if: steps.changed-files.outputs.any_changed == 'true' || github.event.action == 'workflow_dispatch'
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: ${{ secrets.GCP_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      - name: Deploy to Cloud Functions
        if: steps.changed-files.outputs.any_changed == 'true' || github.event.action == 'workflow_dispatch'
        id: deploy
        uses: google-github-actions/deploy-cloud-functions@v0
        with:
          name: minify-html
          source_dir: gcp/minify-html
          runtime: nodejs16
          entry_point: minify
          memory_mb: 2048
          region: ${{ secrets.GCP_REGION }}
          https_trigger_security_level: secure_always
          timeout: 10
          min_instances: 0
          max_instances: 100
          project_id: ${{ secrets.GCP_PROJECT }}
  badge:
    name: Update status badge
    if: ${{ always() }}
    needs:
      - resize-image
      - image-size
      - print-pdf
      - minify-html
    runs-on: ubuntu-latest
    steps:
      - name: Count failures
        run: |
          failures=0
          total=4
          if [[ "${{ needs.resize-image.result }}" != "success" ]]; then ((failures++)); fi
          if [[ "${{ needs.image-size.result }}" != "success" ]]; then ((failures++)); fi
          if [[ "${{ needs.print-pdf.result }}" != "success" ]]; then ((failures++)); fi
          if [[ "${{ needs.minify-html.result }}" != "success" ]]; then ((failures++)); fi
          if [[ "$failures" = "$total" ]]; then echo "color=critical" | tee -a $GITHUB_ENV
          elif [[ "$failures" = 0 ]]; then echo "color=090" | tee -a $GITHUB_ENV
          else echo "color=important" | tee -a $GITHUB_ENV; fi
          echo "result=$((total - failures))/$total" | tee -a $GITHUB_ENV
      - name: Update badge
        uses: schneegans/dynamic-badges-action@v1.1.0
        with:
          auth: ${{ secrets.TORTOISEWRATH_GIST_TOKEN }}
          gistID: e38e961e5c08b2bdf4d78c800d851203
          filename: gcp-prod.json
          label: prod
          message: ${{ env.result }}
          namedLogo: googlecloud
          logoColor: ccc
          color: ${{ env.color }}
