# Copyright 2025 Google LLC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

name: Deploy public site

on:
  workflow_call:
    inputs:
      ref:
        required: true
        type: string
      bucket:
        required: true
        type: string
      database:
        required: true
        type: string
      service_suffix:
        required: false
        type: string
        default: ''

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: ${{ inputs.ref }}
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.GCP_IDENTITY_PROVIDER }}
          service_account: ${{ vars.GCP_SERVICE_ACCOUNT }}
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ vars.GCP_PROJECT }}
          install_components: 'beta'
      - name: Install dev dependencies
        run: npm install
      - name: Compile public site stylesheets
        run: npx sass --style=compressed public:public
      - name: Compile public site scripts
        run: npm run build
      - name: Upload to GCS bucket
        run: |
          gcloud storage rsync ./public gs://${{ inputs.bucket }}/ --recursive --cache-control no-cache
      - id: resize
        name: Deploy resize-photo function
        run: |
          gcloud run deploy resize-photo${{ inputs.service_suffix }} \
          --source functions \
          --function resize-photo \
          --base-image nodejs22 \
          --region ${{ vars.GCP_REGION }} \
          --no-allow-unauthenticated \
          --timeout 10 --concurrency 3
      - id: deploy
        name: Deploy admin site
        run: |
          gcloud beta run deploy fmnas-admin${{ inputs.service_suffix }} \
          --source admin \
          --region ${{ vars.GCP_REGION }} \
          --no-allow-unauthenticated --iap \
          --automatic-updates --base-image nodejs22 \
          --timeout 3600 \
          --set-env-vars "project=${{ vars.GCP_PROJECT }}" \
          --set-env-vars "bucket=${{ inputs.bucket }}" \
          --set-env-vars "database=${{ inputs.database }}" \
          --set-env-vars "RESIZE_ENDPOINT=$(gcloud run services describe resize-photo${{ inputs.service_suffix }} --format 'value(status.url)' --region ${{ vars.GCP_REGION }})" \
          --set-env-vars "asm_db_host=${{ vars.ASM_HOST }}" \
          --set-env-vars "asm_db=${{ vars.ASM_DB }}" \
          --set-env-vars "asm_db_user=${{ vars.ASM_DB_USER }}" \
          --set-env-vars 'asm_db_pass=${{ secrets.ASM_DB_PASS }}'
      - name: Get admin site URL
        id: get-url
        run: echo "SERVER_URL=$(gcloud run services describe fmnas-admin${{ inputs.service_suffix }} --format 'value(status.url)' --region ${{ vars.GCP_REGION }})" >> "$GITHUB_OUTPUT"
      - name: Get identity token
        uses: google-github-actions/auth@v2
        id: get-token
        with:
          workload_identity_provider: ${{ vars.GCP_IDENTITY_PROVIDER }}
          service_account: ${{ vars.GCP_SERVICE_ACCOUNT }}
          token_format: "id_token"
          id_token_audience: ${{ steps.get-url.outputs.SERVER_URL }}
          id_token_include_email: 'true'
      - name: Generate static pages
        run: |
          curl -H "Authorization: Bearer ${{ steps.get-token.outputs.id_token }}" ${{ steps.get-url.outputs.SERVER_URL }}/api/render
